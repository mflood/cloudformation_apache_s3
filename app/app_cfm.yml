Description: >
    Matthew Flood
    This template deploys security groups,
    and an auto-scaling group
    and load balancer with health checks

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    WebAppImageId:
        Description: AMI for Ubuntu
        Type: String
        Default: "ami-005bdb005fb00e791"

    WebAppInstanceType:
        Description: Instance type, should be t2.small or larger
        Type: String
        Default: "t3.small"

Resources:

    BastionSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${EnvironmentName}-BastionSecGroup"
            GroupDescription: Allow SSH in, all out
            VpcId:
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name 
                  Value: !Ref EnvironmentName


    BastionInstance: 
        Type: AWS::EC2::Instance
        Properties: 
            ImageId: "ami-082b5a644766e0e6f"
            InstanceType: t2.micro
            KeyName: "devops"
            BlockDeviceMappings: 
            - DeviceName: "/dev/sdm"
              Ebs: 
                  VolumeType: "io1"
                  Iops: "200"
                  DeleteOnTermination: "true"
                  VolumeSize: "20"
            - DeviceName: "/dev/sdk"
              NoDevice: {}      
            NetworkInterfaces: 
              - AssociatePublicIpAddress: "true"
                DeviceIndex: "0"
                GroupSet: 
                  - Ref: "BastionSecGroup"
                SubnetId: 
                    Fn::ImportValue: 
                        !Sub "${EnvironmentName}-PUB2-SN"
            Tags:
                - Key: Name 
                  Value: !Sub "${EnvironmentName}-BASTION"

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${EnvironmentName}-LBSecGroup"
            GroupDescription: Allow HTTP to load balancer and Loadbalancer to Apache
            VpcId:
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name 
                  Value: !Ref EnvironmentName

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${EnvironmentName}-WSSecGroup"
            GroupDescription: Allow HTTP and SSH to Web Server
            VpcId:
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name 
                  Value: !Ref EnvironmentName

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Roles:
            - UdacityS3ReadOnlyEC2

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
              Fn::Base64: !Sub |
                  #!/bin/bash
                  apt-get update -y
                  apt-get install unzip awscli -y
                  apt-get install apache2 -y
                  systemctl start apache2.service
                  cd /var/www/html
                  aws s3 cp s3://udacity-demo-1/udacity.zip .
                  unzip -o udacity.zip
            ImageId: !Ref WebAppImageId
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref WebAppInstanceType
            IamInstanceProfile:
                Ref: "ProfileWithRolesForOurApp"
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '12'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue:
                #!Sub "${EnvironmentName}-PUB-NETS"
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '3'
            MaxSize: '5'
            TargetGroupARNs:
                - Ref: WebAppTargetGroup
            Tags:
              - Key: Name 
                Value: !Ref EnvironmentName
                PropagateAtLaunch: "true"

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"


    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
                - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            #Certificates:
            #- Certificate
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP
            #SslPolicy: String

    ALBListnerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            #Certificates:
            #- Certificate
            Actions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn:
                Ref: Listener
            Priority: 1
Outputs: 

    LoadBalancer: 
        Description: A reference to the created LB DNSName
        Value: !Ref LBSecGroup
        Value: 
            Fn::Join: [ "", [ "http://", { "Fn::GetAtt" : [ "WebAppLB", "DNSName" ] }] ]
        Export:
          Name: !Sub ${EnvironmentName}-LB-URL

    Bastion: 
        Description: A reference to the created Bastion Host
        Value: 
            Fn::Join: [ "", [ "ssh -i ~/Downloads/devops.pem ec2-user@", { "Fn::GetAtt" : [ "BastionInstance", "PublicIp" ] }] ]
        Export:
          Name: !Sub ${EnvironmentName}-BastionPublicIp
